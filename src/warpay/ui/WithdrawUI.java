/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package warpay.ui;

import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.ParseException;
import javax.swing.JOptionPane;
import warpay.data.AccountData;
import warpay.util.Extension;

/**
 *
 * @author irkham
 */
public class WithdrawUI extends javax.swing.JFrame {

    /**
     * Creates new form WithdrawUI
     */
    public WithdrawUI() {
        setUndecorated(true);
        initComponents();

        fieldAmount.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isDigit(c)) {
                    e.consume();
                }
            }
        });
        fieldPass.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isDigit(c)) {
                    e.consume();
                }

                if (fieldPass.getPassword().length >= 19) {
                    e.consume();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        main = new warpay.swing.RoundPanel();
        head = new warpay.swing.RoundPanel();
        buttonBack = new javax.swing.JButton();
        buttonNext = new javax.swing.JButton();
        labelBack = new javax.swing.JLabel();
        labelNext = new javax.swing.JLabel();
        body = new warpay.swing.RoundPanel();
        labelId = new javax.swing.JLabel();
        fieldId = new warpay.swing.field.TextField();
        labelBalance = new javax.swing.JLabel();
        fieldBalance = new warpay.swing.field.TextField();
        labelPass = new javax.swing.JLabel();
        labelAmount = new javax.swing.JLabel();
        fieldAmount = new warpay.swing.field.TextField();
        buttonProcess = new warpay.swing.button.Button();
        title = new javax.swing.JLabel();
        fieldPass = new warpay.swing.field.PasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Withdraw");
        setBackground(new Color(1.0f, 1.0f, 1.0f, 0.0f));
        setIconImage(Extension.getFrameIcon(getClass().getResource("/assets/image/warpay.png")));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(480, 480));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        bg.setBackground(new Color(1.0f, 1.0f, 1.0f, 0.0f));
        bg.setPreferredSize(getPreferredSize());
        bg.setLayout(null);

        main.setBackground(new java.awt.Color(255, 255, 255));
        main.setPreferredSize(new java.awt.Dimension(480, 480));

        head.setBackground(new java.awt.Color(81, 203, 255));
        head.setPreferredSize(new java.awt.Dimension(456, 48));

        buttonBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/image/navigate_before.png"))); // NOI18N
        buttonBack.setBorder(null);
        buttonBack.setBorderPainted(false);
        buttonBack.setContentAreaFilled(false);
        buttonBack.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        buttonBack.setPreferredSize(new java.awt.Dimension(24, 24));
        buttonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBackActionPerformed(evt);
            }
        });

        buttonNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/image/navigate_next.png"))); // NOI18N
        buttonNext.setBorder(null);
        buttonNext.setBorderPainted(false);
        buttonNext.setContentAreaFilled(false);
        buttonNext.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        buttonNext.setPreferredSize(new java.awt.Dimension(24, 24));
        buttonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNextActionPerformed(evt);
            }
        });

        labelBack.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelBack.setLabelFor(buttonBack);
        labelBack.setText("BACK");

        labelNext.setFont(labelBack.getFont());
        labelNext.setLabelFor(buttonNext);
        labelNext.setText("DEPOSIT");

        javax.swing.GroupLayout headLayout = new javax.swing.GroupLayout(head);
        head.setLayout(headLayout);
        headLayout.setHorizontalGroup(
            headLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonBack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(labelBack)
                .addGap(290, 290, 290)
                .addComponent(labelNext)
                .addGap(0, 0, 0)
                .addComponent(buttonNext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );
        headLayout.setVerticalGroup(
            headLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(headLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(buttonBack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonNext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelBack)
                    .addComponent(labelNext))
                .addGap(12, 12, 12))
        );

        body.setBackground(new java.awt.Color(81, 203, 255));

        labelId.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        labelId.setLabelFor(fieldId);
        labelId.setText("Account Id");

        fieldId.setEditable(false);
        fieldId.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        fieldId.setPreferredSize(new java.awt.Dimension(315, 41));
        fieldId.setRequestFocusEnabled(false);

        labelBalance.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        labelBalance.setLabelFor(labelBalance);
        labelBalance.setText("Balance");

        fieldBalance.setEditable(false);
        fieldBalance.setFont(fieldId.getFont());
        fieldBalance.setPreferredSize(fieldId.getPreferredSize());
        fieldBalance.setRequestFocusEnabled(false);

        labelPass.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        labelPass.setLabelFor(fieldPass);
        labelPass.setText("Passcode");

        labelAmount.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        labelAmount.setLabelFor(labelAmount);
        labelAmount.setText("Amount");

        fieldAmount.setFont(fieldId.getFont());
        fieldAmount.setPreferredSize(fieldId.getPreferredSize());

        buttonProcess.setText("PROCESS");
        buttonProcess.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        buttonProcess.setPreferredSize(new java.awt.Dimension(106, 45));
        buttonProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonProcessActionPerformed(evt);
            }
        });

        title.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("WITHDRAW");
        title.setPreferredSize(new java.awt.Dimension(140, 24));

        fieldPass.setFont(fieldId.getFont());
        fieldPass.setPreferredSize(fieldId.getPreferredSize());

        javax.swing.GroupLayout bodyLayout = new javax.swing.GroupLayout(body);
        body.setLayout(bodyLayout);
        bodyLayout.setHorizontalGroup(
            bodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bodyLayout.createSequentialGroup()
                .addGap(175, 175, 175)
                .addComponent(buttonProcess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(175, 175, 175))
            .addGroup(bodyLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(bodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bodyLayout.createSequentialGroup()
                        .addGroup(bodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelBalance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelAmount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelPass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(24, 24, 24)
                        .addGroup(bodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(bodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(fieldAmount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(fieldBalance, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(fieldId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bodyLayout.createSequentialGroup()
                        .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12))))
        );
        bodyLayout.setVerticalGroup(
            bodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bodyLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(bodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(labelId)
                    .addComponent(fieldId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(bodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(labelBalance)
                    .addComponent(fieldBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(bodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(fieldAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelAmount))
                .addGap(13, 13, 13)
                .addGroup(bodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(fieldPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPass))
                .addGap(48, 48, 48)
                .addComponent(buttonProcess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout mainLayout = new javax.swing.GroupLayout(main);
        main.setLayout(mainLayout);
        mainLayout.setHorizontalGroup(
            mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(head, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(body, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );
        mainLayout.setVerticalGroup(
            mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(head, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(body, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        bg.add(main);
        main.setBounds(0, 0, 480, 480);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(bg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(bg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(480, 480));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBackActionPerformed
        java.awt.EventQueue.invokeLater(() -> {
            MainUI.getInstance().setVisible(true);
            dispose();
        });
    }//GEN-LAST:event_buttonBackActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        requestFocusInWindow();
        Extension.showAccountId(fieldId);
        Extension.showAccountBalance(fieldBalance);
        MainUI.getInstance().setFocusable(false);
        MainUI.getInstance().setEnabled(false);
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        MainUI.getInstance().setEnabled(true);
        MainUI.getInstance().setFocusable(true);
    }//GEN-LAST:event_formWindowClosed

    private void buttonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNextActionPerformed
        dispose();
        java.awt.EventQueue.invokeLater(() -> {
            MainUI.getInstance().setVisible(true);
            DepositUI depoUI = new DepositUI();
            depoUI.setVisible(true);
        });
    }//GEN-LAST:event_buttonNextActionPerformed

    private void buttonProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonProcessActionPerformed
        String strAmount = fieldAmount.getText().trim();
        String pass = String.valueOf(fieldPass.getPassword()).trim();
        if (!isInputValid(strAmount, pass)) {
            return;
        }

        if (!Extension.isPassCorrect(pass)) {
            return;
        }

        if (!isWithdrawConfirmed()) {
            return;
        }

        double doubleAmount = Double.valueOf(fieldAmount.getText().trim());
        double newBalance = Extension.reduceBalance(doubleAmount);

        try {

            int res = Extension.insertTransactionDetails(TYPE, doubleAmount);
            if (res == 1) {

                res = Extension.updateAccountBalance(newBalance);
                if (res == 1) {
                    AccountData.getInstance().setBalance(newBalance);

                    JOptionPane.showMessageDialog(null, "Successfully wihtdraw the requested amount from your account");

                    Extension.showAccountBalance(fieldBalance);
                    if (BalanceUI.getInstance() != null) {
                        BalanceUI.showBalance();
                    }
                    if (DashboardUI.getInstance() != null) {
                        DashboardUI.showTransactionHistory();
                    }

                    fieldAmount.setText("");
                    fieldPass.setText("");
                }
            }

        } catch (SQLException | ParseException e) {
            System.err.println(e.getMessage());
            JOptionPane.showMessageDialog(null,
                    e.getMessage(), "Error",
                    JOptionPane.INFORMATION_MESSAGE
            );
            System.exit(0);
        }
    }//GEN-LAST:event_buttonProcessActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WithdrawUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new WithdrawUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bg;
    private warpay.swing.RoundPanel body;
    private javax.swing.JButton buttonBack;
    private javax.swing.JButton buttonNext;
    private warpay.swing.button.Button buttonProcess;
    private warpay.swing.field.TextField fieldAmount;
    private warpay.swing.field.TextField fieldBalance;
    private warpay.swing.field.TextField fieldId;
    private warpay.swing.field.PasswordField fieldPass;
    private warpay.swing.RoundPanel head;
    private javax.swing.JLabel labelAmount;
    private javax.swing.JLabel labelBack;
    private javax.swing.JLabel labelBalance;
    private javax.swing.JLabel labelId;
    private javax.swing.JLabel labelNext;
    private javax.swing.JLabel labelPass;
    private warpay.swing.RoundPanel main;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables

    private static final String TYPE = "Withdraw";

    private boolean isWithdrawConfirmed() {
        int opt = JOptionPane.showConfirmDialog(null, "Are you sure want to make a withdrawal?", TYPE, JOptionPane.YES_NO_OPTION);
        return opt == JOptionPane.YES_OPTION;
    }

    private boolean isInputValid(String amount, String pass) {
        if (amount.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter your withdrawal amount");
            fieldAmount.requestFocusInWindow();
            return false;
        } else if (Double.valueOf(amount) == 0) {
            JOptionPane.showMessageDialog(null, "Please enter a valid withdrawal amount");
            fieldAmount.requestFocusInWindow();
            return false;
        } else if (Double.valueOf(amount) > AccountData.getInstance().getBalance()) {
            JOptionPane.showMessageDialog(null, "Your balance is lower than the requested withdrawal amount");
            fieldAmount.requestFocusInWindow();
            return false;
        }

        if (pass.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter your passcode");
            fieldPass.requestFocusInWindow();
            return false;
        }

        return true;
    }
}
